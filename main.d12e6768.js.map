{"version":3,"sources":["src/global.ts","src/selection.ts","src/draggable.ts","src/instruments.ts","src/map.ts","src/storage.ts","src/main.ts"],"names":[],"mappings":"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","file":"main.d12e6768.js","sourceRoot":"..","sourcesContent":["export var map : HTMLElement\n\nexport function setMap(element : HTMLElement) {\n    map = element\n}\n\nexport const shaku = 20 // px\nexport const meter = 3.3 * shaku // px\n","import { map } from './global'\n\nlet startingX: number\nlet startingY: number\nlet isSelecting: boolean = false\n\nfunction interscts(r1: ClientRect, r2: ClientRect): boolean {\n    if (r1.left + r1.width >= r2.left &&\n        r1.left <= r2.left + r2.width &&\n        r1.top + r1.height >= r2.top &&\n        r1.top <= r2.top + r2.height) {\n        return true;\n    }\n    return false;\n}\n\nfunction querySelectorRect(query: string, r: ClientRect): NodeListOf<HTMLElement> {\n    let elements = map.querySelectorAll(query)\n\n    let filteredList = []\n    elements.forEach((element) => {\n        if (interscts(element.getBoundingClientRect(), r)) {\n            filteredList.push(element)\n        }\n    })\n\n    return filteredList as unknown as NodeListOf<HTMLElement>\n}\n\nexport function selectElement(element: HTMLElement) {\n    element.classList.add('selected')\n}\n\nexport function clearSelection() {\n    for (let index = 0; index < map.children.length; index++) {\n        map.children.item(index).classList.remove('selected')\n    }\n}\n\nexport function initSelection() {\n    let selection = document.getElementById(\"selection\")\n    map.onmousedown = (mouseDown) => {\n        if ((mouseDown.target as HTMLElement).id != 'map') {\n            return\n        }\n        clearSelection()\n        isSelecting = true\n        startingX = mouseDown.clientX - map.offsetLeft\n        startingY = mouseDown.clientY - map.offsetTop\n        selection.style.display = 'block'\n        selection.style.left = startingX + 'px'\n        selection.style.top = startingY + 'px'\n        selection.style.height = '0px'\n        selection.style.width = '0px'\n\n        function onMouseMove(mouseMove: MouseEvent) {\n            let x = mouseMove.clientX - map.offsetLeft\n            let y = mouseMove.clientY - map.offsetTop\n            if (x < 0) {\n                x = 0\n            }\n            if (y < 0) {\n                y = 0\n            }\n            if (x > map.offsetWidth) {\n                x = map.offsetWidth\n            }\n            if (y > map.offsetHeight) {\n                y = map.offsetHeight\n            }\n            let width = Math.abs(startingX - x)\n            let height = Math.abs(startingY - y)\n            selection.style.left = Math.min(startingX, x) + 'px'\n            selection.style.top = Math.min(startingY, y) + 'px'\n            selection.style.height = height + 'px'\n            selection.style.width = width + 'px'\n            clearSelection()\n            querySelectorRect('.taiko', selection.getBoundingClientRect()).forEach(selectElement)\n        }\n\n        function onMouseUp(mouseUp: MouseEvent) {\n            isSelecting = false\n            selection.style.display = 'none'\n            document.removeEventListener('mouseup', onMouseUp)\n            document.removeEventListener('mousemove', onMouseMove)\n        }\n\n        document.addEventListener('mousemove', onMouseMove)\n        document.addEventListener('mouseup', onMouseUp)\n    }\n}\n","import { clearSelection, selectElement } from './selection'\nimport { map } from './global'\n\nexport function makeDraggable(element: HTMLElement) {\n    element.onmousedown = (event) => {\n        event.preventDefault()\n\n        let shiftX = event.clientX - element.offsetLeft\n        let shiftY = event.clientY - element.offsetTop\n\n        clearSelection()\n        selectElement(element)\n\n        function onMouseMove(event: MouseEvent) {\n            let newLeft = event.clientX - shiftX\n            let newTop = event.clientY - shiftY\n\n            if (newLeft < 0) {\n                newLeft = 0\n            }\n            if (newTop < 0) {\n                newTop = 0\n            }\n            let rightEdge = map.offsetWidth - element.offsetWidth\n            if (newLeft > rightEdge) {\n                newLeft = rightEdge\n            }\n            let bottomEdge = map.offsetHeight - element.offsetHeight\n            if (newTop > bottomEdge) {\n                newTop = bottomEdge\n            }\n\n            element.style.left = newLeft + window.pageXOffset + 'px'\n            element.style.top = newTop + window.pageYOffset + 'px'\n        }\n\n        function onMouseUp() {\n            document.removeEventListener('mouseup', onMouseUp)\n            document.removeEventListener('mousemove', onMouseMove)\n        }\n\n        document.addEventListener('mousemove', onMouseMove);\n        document.addEventListener('mouseup', onMouseUp);\n\n    }\n\n    element.ondragstart = () => false\n}","import { makeDraggable } from './draggable'\n\nexport enum InstrumentType {\n    Okedo = 'okedo'\n}\n\nexport interface InstrumentData {\n    type : InstrumentType,\n    x : number,\n    y : number\n}\n\nexport function createInstrument(instrument : InstrumentType, map : HTMLElement, x : number, y : number) {\n    let newInstrument = document.createElement(\"div\")\n    newInstrument.classList.add(instrument)\n    newInstrument.classList.add('taiko')\n    newInstrument.setAttribute('data-type', instrument)\n    makeDraggable(newInstrument)\n    map.append(newInstrument)\n    newInstrument.style.left = map.offsetWidth / 2 - newInstrument.offsetWidth / 2 + x + 'px'\n    newInstrument.style.top = map.offsetHeight / 2 - newInstrument.offsetHeight / 2 + y + 'px'\n}\n","import { setMap, map, meter } from './global'\n\nexport interface MapData {\n    height : number,\n    width : number\n}\n\nexport function initMap(height : number, width : number) {\n    setMap(document.getElementById(\"map\"))\n    map.querySelectorAll('.taiko').forEach((element : HTMLElement) => {\n        element.remove()\n    })\n    map.style.height = height * meter + 'px'\n    map.style.width = width * meter + 'px'\n    map.style.backgroundPositionX = Math.round(width * meter / 2) + 'px'\n    map.style.backgroundPositionY = Math.round(height * meter / 2) + 'px'\n    map.setAttribute('data-height', height.toString())\n    map.setAttribute('data-width', width.toString())\n}\n","import { map } from './global'\nimport { MapData, initMap } from './map'\nimport { InstrumentData, InstrumentType, createInstrument } from './instruments'\n\ninterface SaveData {\n    map : MapData,\n    instruments : Array<InstrumentData>\n}\n\nexport function save() {\n    let height = parseInt(map.getAttribute('data-height'))\n    let width = parseInt(map.getAttribute('data-width'))\n    let data : SaveData = {\n        map : {\n            height : height,\n            width : width\n        },\n        instruments : Array<InstrumentData>()\n    }\n    map.querySelectorAll('.taiko').forEach((element : HTMLElement) => {\n        data.instruments.push({\n            type : element.getAttribute('data-type') as InstrumentType,\n            x : element.offsetLeft + element.offsetWidth / 2 - map.offsetWidth / 2,\n            y : element.offsetTop + element.offsetHeight / 2 - map.offsetHeight / 2\n        })\n    });\n    (document.getElementById('json') as HTMLTextAreaElement).value = JSON.stringify(data)\n}\n\nexport function load() {\n    let json = (document.getElementById('json') as HTMLTextAreaElement).value\n    let data : SaveData = JSON.parse(json)\n    initMap(data.map.height, data.map.width)\n    data.instruments.forEach((instrument) => {\n        createInstrument(instrument.type, map, instrument.x, instrument.y)\n    })\n}","import { map } from './global'\nimport { initSelection } from './selection'\nimport { createInstrument, InstrumentType } from './instruments'\nimport { initMap } from './map'\nimport { save, load } from './storage'\n\nwindow.onload = () => {\n    initMap(8, 12)\n    initSelection()\n}\n\ndocument.getElementById('add').onclick = (event) => {\n    createInstrument(InstrumentType.Okedo, map, 0, 0)\n}\n\ndocument.getElementById('export').onclick = (event) => {\n    save()\n}\n\ndocument.getElementById('import').onclick = (event) => {\n    load()\n}\n\ndocument.getElementById('new').onclick = (event) => {\n    let height = parseInt((document.getElementById('height') as HTMLInputElement).value)\n    let width = parseInt((document.getElementById('width') as HTMLInputElement).value)\n    initMap(height, width)\n}"]}